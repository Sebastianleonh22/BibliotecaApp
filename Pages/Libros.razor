@page "/libros"
@using BibliotecaApp.Data
@inject BibliotecaService BibliotecaService

<h3>Lista de Libros</h3>

<button @onclick="MostrarFormulario">Agregar Libro</button>

@if (mostrarFormulario)
{
    <EditForm Model="libroActual" OnValidSubmit="GuardarLibro">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label>Título:</label>
            <InputText @bind-Value="libroActual.Titulo" />
        </div>
        <div>
            <label>Autor:</label>
            <InputText @bind-Value="libroActual.Autor" />
        </div>
        <div>
            <label>Género:</label>
            <InputText @bind-Value="libroActual.Genero" />
        </div>
        <div>
            <label>Año de Publicación:</label>
            <InputNumber @bind-Value="libroActual.AñoPublicacion" />
        </div>
        <button type="submit">Guardar</button>
        <button type="button" @onclick="OcultarFormulario">Cancelar</button>
    </EditForm>
}

<ul>
    @foreach (var libro in libros)
    {
        <li>
            @libro.Titulo - @libro.Autor - @libro.Genero - @libro.AñoPublicacion
            <button @onclick="() => EditarLibro(libro)">Editar</button>
            <button @onclick="() => EliminarLibro(libro.Id)">Eliminar</button>
        </li>
    }
</ul>

@code {
    private List<Libro> libros;
    private Libro libroActual = new Libro();
    private bool mostrarFormulario = false;

    protected override async Task OnInitializedAsync()
    {
        libros = await BibliotecaService.GetLibrosAsync();
    }

    private void MostrarFormulario()
    {
        libroActual = new Libro();  // Nuevo libro
        mostrarFormulario = true;
    }

    private void OcultarFormulario()
    {
        mostrarFormulario = false;
        libroActual = new Libro();
    }

    private async Task GuardarLibro()
    {
        if (libroActual.Id == 0)
        {
            libroActual.Id = libros.Any() ? libros.Max(l => l.Id) + 1 : 1;
            await BibliotecaService.AddLibroAsync(libroActual);
        }
        else
        {
            await BibliotecaService.UpdateLibroAsync(libroActual);
        }
        libros = await BibliotecaService.GetLibrosAsync();
        OcultarFormulario();
    }

    private void EditarLibro(Libro libro)
    {
        libroActual = libro;
        mostrarFormulario = true;
    }

    private async Task EliminarLibro(int id)
    {
        await BibliotecaService.DeleteLibroAsync(id);
        libros = await BibliotecaService.GetLibrosAsync();
    }
}
